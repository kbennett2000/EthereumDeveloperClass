*************************************
*************************************
*               Lab 1               *
*************************************
*************************************
*** SNIPPET 1.1
// SPDX-License-Identifier: CC-BY-1.0
// Creative Commons Attribution 1.0 Generic

// Contract will be compiled on version 0.7.0 or greater
pragma solidity ^0.7.0;

// A smart contract to model a music album
contract Album {

} // Album


*** SNIPPET 1.2
    // Local state variables
    // The artist/group who recorded the album
    string artist = 'Nirvana'; 
    // The album's title
    string albumTitle = 'Nevermind';
    // The number of tracks on the album
    uint tracks = 13;


*** SNIPPET 1.3
    // Local state variables
    // The artist/group who recorded the album
    string public artist = 'Nirvana'; 
    // The album's title
    string public albumTitle = 'Nevermind';
    // The number of tracks on the album
    uint public tracks = 13;


*** SNIPPET 1.4
// SPDX-License-Identifier: CC-BY-1.0
// Creative Commons Attribution 1.0 Generic

// Contract will be compiled on version 0.7.0 or greater
pragma solidity ^0.7.0;

// A smart contract to model a music album
contract Album {
    
    // Local state variables
    // The artist/group who recorded the album
    string public artist; 
    // The album's title
    string public albumTitle;
    // The number of tracks on the album
    uint public tracks;
    
    constructor() {
        artist = 'Nirvana';
        albumTitle = 'Nevermind';
        tracks = 13;
    } // constructor
    
} // Album


*** SNIPPET 1.5
    // The author of this smart contract
    string public constant contractAuthor = 'YOUR NAME HERE';


*** SNIPPET 1.6
    // Returns the current album information
    function getAlbum() public view returns (string memory, string memory, uint) {
        return (artist, albumTitle, tracks);
    } // getAlbum
    
    // Set the album information
    function setAlbum(string memory _artist, string memory _albumTitle, uint _tracks) public {
        artist = _artist;
        albumTitle = _albumTitle;
        tracks = _tracks;
    } // setAlbum




*************************************
*************************************
*               Lab 3               *
*************************************
*************************************
*** SNIPPET 3.1
mkdir checkBalance
cd checkBalance
npm install web3


*** SNIPPET 3.2
let infuraProjectId = "INSERT YOUR INFURA PROJECT ID";
let metamaskWallet = "INSERT YOUR METAMASK WALLET ID";
let Web3 = require("web3");
let web3 = new Web3(new Web3.providers.HttpProvider("https://ropsten.infura.io/v3/" + infuraProjectId));
web3.eth.getBalance(metamaskWallet).then(balance => console.log(balance));




*************************************
*************************************
*               Lab 4               *
*************************************
*************************************
*** SNIPPET 4.1
npm install web3


*** SNIPPET 4.2
touch index.html
touch main.css


*** SNIPPET 4.3
body {
    background-color:#F0F0F0;
    padding: 2em;
    font-family: 'Raleway','Source Sans Pro', 'Arial';
}
.container {
    width: 50%;
    margin: 0 auto;
}
label {
    display:block;
    margin-bottom:10px;
}
input {
    padding:10px;
    width: 50%;
    margin-bottom: 1em;
}
button {
    margin: 2em 0;
    padding: 1em 4em;
    display:block;
}

#album {
    padding:1em;
    background-color:#fff;
    margin: 1em 0;
}


*** SNIPPET 4.4
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Album Dashboard</title>

    <link rel="stylesheet" type="text/css" href="main.css">

    <script src="./node_modules/web3/dist/web3.min.js"></script>

</head>

<body>
    <div class="container">

        <h1>The Album Dashboard</h1>

        <h2 id="album"></h2>

		<label for="albumArtist" class="col-lg-2 control-label">Artist</label>
        <input id="albumArtist" type="text">

        <label for="albumName" class="col-lg-2 control-label">Album Name</label>
        <input id="albumName" type="text">

        <label for="tracks" class="col-lg-2 control-label">Tracks</label>
        <input id="tracks" type="text">

        <button id="button">Update Album</button>


    </div>

    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>

    <script>

	// Update these variables with YOUR account number and contract address
	var myAccountNumber = 'PASTE YOUR ACCOUNT NUMBER HERE (FROM GANACHE)';
	var myContractAddress = 'PASTE YOUR DEPLOYED CONTRACT ADDRESS HERE (FROM GANACHE)';

	// Create a new web3 reference
	web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:7545"));

	// Check your account balance, display the result
	web3.eth.getBalance(myAccountNumber).then(balance => console.log(balance));

	// Build a reference to the smart contract.
	var albumContract = new web3.eth.Contract('PASTE YOUR ABI HERE (without the quotes)');
	albumContract.options.address = myContractAddress;

	// Display contract info for confirmation	
	console.log(album);

	// Display album information.
	albumContract.methods.getAlbum().call(function (error, result) {
		// Display album artist, title, and tracks
		if (!error) {
			$("#album").html(result[0] + ' - ' + result[1] + ' (' + result[2] + ' tracks)');
			console.log(result);
		} else
			console.error(error);
	});

	// Update the current album info using the user-provided information
	$("#button").click(function () {
		// Get album info from the UI
		var theAlbumArtist = $("#albumArtist").val();
		console.log("THE ALBUM ARTIST IS: " + theAlbumArtist);

		var theAlbumName = $("#albumName").val();
		console.log("THE ALBUM NAME IS: " + theAlbumName);

		var albumTracks = $("#tracks").val();
		console.log("THE NUMBER OF TRACKS IS: " + albumTracks);
		
		// Pass collected info to SetAlbum contract method
		albumContract.methods.setAlbum(theAlbumArtist, theAlbumName, albumTracks).send({from:myAccountNumber});
	});
    </script>

</body>

</html>



*************************************
*************************************
*               Lab 5               *
*************************************
*************************************
*** SNIPPET 5.1
    // Event which will be raised anytime the current album information is updated.
    event albumEvent(string albumEvent_Artist, string albumEvent_Title, uint albumEvent_Tracks);


*** SNIPPET 5.2
        // Raise the albumEvent to let any event subscribers know the current album information has changed.
        emit albumEvent(_artist, _albumTitle, _tracks);


*** SNIPPET 5.3
		<!--Display a spinner while waiting for information-->
		<img id="loader" src="ajax-loader.gif">


*** SNIPPET 5.4
	// The syntax below uses Web3's WebsocketProvider instead of the HttpProvider. This provider DOES support event subscriptions.
	let web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:7545'))



*** SNIPPET 5.5
	albumContract.events.albumEvent(
		function(error, result){
			if (!error) {
				$("#loader").hide();
				$("#album").html('The current album is ' + result.returnValues.albumEvent_Title + 
				' by ' + result.returnValues.albumEvent_Artist + 
				'.<br/> It contains ' + result.returnValues.albumEvent_Tracks + ' tracks.');
			} else {
				$("#loader").hide();
				console.log(error);
			} // else
		} // function(error, result)
	); // albumContract.albumEvent


*** SNIPPET 5.6
		// Show the loading icon. This icon will be hidden when the albumEvent event is raised by the contract.
		$("#loader").show();


*** SNIPPET 5.7
#loader {
    display:none;
}




*************************************
*************************************
*               Lab 6               *
*************************************
*************************************
*** SNIPPET 6.1
    // The owner of the current instance of this smart contract
    address owner;


*** SNIPPET 6.2
        // Set the owner property of this contract instance to the initiator of this contract deployment
        owner = msg.sender;


*** SNIPPET 6.3
    // This function modifier ensures that the initiator of any transaction 
    //   it is attached to matches the address of the contract's owner.
    // Use this function modifier for functions that should only
    //   be performed by the owner of this contract instance.
    modifier onlyOwner {
        if (msg.sender != owner) {
            // The initiator of this transaction is NOT the contract instance's owner!
        } else {
            _;
        } // else
    } // modifier onlyOwner


*** SNIPPET 6.4
    function setAlbum(string memory _artist, string memory _albumTitle, uint _tracks) onlyOwner public {


*** SNIPPET 6.5
    // Event which will be raised anytime the current album information is updated.
    event errorEvent(string errorEvent_Description);


*** SNIPPET 6.6
            emit errorEvent("Only the owner of this contract instance can perform this function!");


*** SNIPPET 6.7
	albumContract.events.errorEvent(
		function(error, result){
			$("#loader").hide();
			$("#album").html('<h1>ERROR: </h1><br/>' + result.returnValues.errorEvent_Description);
		} // function(error, result)
	); // albumContract.errorEvent




*************************************
*************************************
*               Lab 1               *
*************************************
*************************************
*** SNIPPET 7.1
    // A custom data structure used to define a music album
    struct musicAlbum {
        // The artist/group who recorded the album
        string artist; 
        // The album's title
        string albumTitle;
        // The number of tracks on the album
        uint tracks;
    } // struct musicAlbum


*** SNIPPET 7.2
    // The current album information
    musicAlbum public currentAlbum;
    // A mapping of every user's favorite album
    mapping(address => musicAlbum) public userAlbums;


*** SNIPPET 7.3
    // Event which will be raised anytime the current album information is updated.
    event albumEvent(string albumEvent_Description, string albumEvent_Artist, string albumEvent_Title, uint albumEvent_Tracks);


*** SNIPPET 7.4
    // Contract constructor.
    //   This code is called once when the contract instance is deployed to the Ethereum network
    constructor() {
        // Feel free to use your own preferred values below :)
        currentAlbum.artist = 'Nirvana';
        currentAlbum.albumTitle = 'Nevermind';
        currentAlbum.tracks = 13;
        // Set the owner property of this contract instance to the initiator of this contract deployment
        owner = msg.sender;
    } // constructor


*** SNIPPET 7.5
    // Returns the current album information
    function getCurrentAlbum() public view returns (string memory, string memory, uint) {
        return (currentAlbum.artist, currentAlbum.albumTitle, currentAlbum.tracks);
    } // getCurrentAlbum


*** SNIPPET 7.6
    // Set the current album information
    function setCurrentAlbum(string memory _artist, string memory _albumTitle, uint _tracks) onlyOwner public {
        currentAlbum.artist = _artist;
        currentAlbum.albumTitle = _albumTitle;
        currentAlbum.tracks = _tracks;
        
        // Raise the albumEvent to let any event subscribers know the current album information has changed.
        emit albumEvent("The current album information has been updated", _artist, _albumTitle, _tracks);
    } // setCurrentAlbum


*** SNIPPET 7.7
    // Returns the current user's favorite album information
    function getUsersFavoriteAlbum() public view returns (string memory, string memory, uint) {
        return (userAlbums[msg.sender].artist, userAlbums[msg.sender].albumTitle, userAlbums[msg.sender].tracks);
    } // getUsersFavoriteAlbum
    
    // Set the current user's favorite album information
    function setUsersFavoriteAlbum(string memory _artist, string memory _albumTitle, uint _tracks) public {
        userAlbums[msg.sender].artist = _artist;
        userAlbums[msg.sender].albumTitle = _albumTitle;
        userAlbums[msg.sender].tracks = _tracks;
        
        // Raise the albumEvent to let any event subscribers know the current album information has changed.
        emit albumEvent("You have updated your personal favorite album information", _artist, _albumTitle, _tracks);
    } // setUsersFavoriteAlbum


*** SNIPPET 7.8
    <div class="container">
        <h1>The Album Dashboard</h1>
		<!--Display a spinner while waiting for information-->
		<img id="loader" src="ajax-loader.gif">
		<!--Status information coming from contract events-->		
		<h2>Status Message:<br/></h2>		
		<h2 id="status"></h2>
		<!--Display current album information-->		
		<h2>CURRENT ALBUM INFORMATION:<br/></h2>		
		<h2 id="album"></h2>
		<!--Display the current user's favorite album information-->		
		<h2>CURRENT USER'S PERSONAL FAVORITE:<br/></h2>
		<h2 id="userAlbum"></h2>
		<!--Collect information to perform an update-->
		<!--Get the Artist-->
		<label for="albumArtist" class="col-lg-2 control-label">Artist</label>
        <input id="albumArtist" type="text">
		<!--Get the Album Title-->
        <label for="albumName" class="col-lg-2 control-label">Album Name</label>
        <input id="albumName" type="text">
		<!--Get the number of tracks on the album-->
        <label for="tracks" class="col-lg-2 control-label">Tracks</label>
        <input id="tracks" type="text">
		<!--Use this information to update the current album-->
        <button id="button">Update Album</button>
		<!--Use this information to update the current user's favorite album-->
		<button id="userButton">Set My Personal Album</button>
    </div>


*** SNIPPET 7.9
	// Display current album information.
	albumContract.methods.getCurrentAlbum().call(function (error, result) {
		// Display album artist, title, and tracks
		if (!error) {
			$("#album").html(result[0] + ' - ' + result[1] + ' (' + result[2] + ' tracks)');
			console.log(result);
		} else
			console.error(error);
	});


*** SNIPPET 7.10
	// Display current user's favorite album information.
	albumContract.methods.getUsersFavoriteAlbum().call({from: myAccountNumber}, function (error, result) {
		// Display album artist, title, and tracks
		if (!error) {
			$("#userAlbum").html(result[0] + ' - ' + result[1] + ' (' + result[2] + ' tracks)');
			console.log(result);
		} else
			console.error(error);
	});


*** SNIPPET 7.11
	albumContract.events.albumEvent(
		function(error, result){
			if (!error) {
				$("#loader").hide();
				$("#status").html(result.returnValues.albumEvent_Description + '<br/>' + 
					'ALBUM: ' + result.returnValues.albumEvent_Title +  '<br/>' + 
					'ARTIST: ' + result.returnValues.albumEvent_Artist +  '<br/>' + 
					result.returnValues.albumEvent_Tracks + ' tracks.');
			} else {
				$("#loader").hide();
				console.log(error);
			} // else
		} // function(error, result)
	); // albumContract.albumEvent


*** SNIPPET 7.12
	albumContract.events.errorEvent(
		function(error, result){
			$("#loader").hide();
			$("#status").html('<h1>ERROR: </h1><br/>' + result.returnValues.errorEvent_Description);
		} // function(error, result)
	); // albumContract.errorEvent


*** SNIPPET 7.13
	// Update the current album info using the user-provided information
	$("#button").click(function () {
		// Get album info from the UI
		var theAlbumArtist = $("#albumArtist").val();
		console.log("THE ALBUM ARTIST IS: " + theAlbumArtist);

		var theAlbumName = $("#albumName").val();
		console.log("THE ALBUM NAME IS: " + theAlbumName);

		var albumTracks = $("#tracks").val();
		console.log("THE NUMBER OF TRACKS IS: " + albumTracks);
		
		// Show the loading icon. This icon will be hidden when the albumEvent event is raised by the contract.
		$("#loader").show();
		// Pass collected info to SetAlbum contract method
		albumContract.methods.setCurrentAlbum(theAlbumArtist, theAlbumName, albumTracks).send({gas: 550000, from:myAccountNumber});
	});


*** SNIPPET 7.14
	// Update the current user's favorite album info using the user-provided information
	$("#userButton").click(function () {
		// Get album info from the UI
		var theAlbumArtist = $("#albumArtist").val();
		console.log("THE ALBUM ARTIST IS: " + theAlbumArtist);

		var theAlbumName = $("#albumName").val();
		console.log("THE ALBUM NAME IS: " + theAlbumName);

		var albumTracks = $("#tracks").val();
		console.log("THE NUMBER OF TRACKS IS: " + albumTracks);
		
		// Show the loading icon. This icon will be hidden when the albumEvent event is raised by the contract.
		$("#loader").show();

		// Pass collected info to SetAlbum contract method
		albumContract.methods.setUsersFavoriteAlbum(theAlbumArtist, theAlbumName, albumTracks).send({gas: 550000, from:myAccountNumber});
	});




*************************************
*************************************
*               Lab 8               *
*************************************
*************************************
*** SNIPPET 8.1
// A smart contract to hold utility functions
contract Utility {
    // The owner of the current instance of this smart contract
    address owner;

    // Event which will be raised anytime the current album information is updated.
    event errorEvent(string errorEvent_Description);
    
    // This function modifier ensures that the initiator of any transaction 
    //   it is attached to matches the address of the contract's owner.
    // Use this function modifier for functions that should only
    //   be performed by the owner of this contract instance.
    modifier onlyOwner {
        if (msg.sender != owner) {
            // The initiator of this transaction is NOT the contract instance's owner!
            emit errorEvent("Only the owner of this contract instance can perform this function!");
        } else {
            _;
        } // else
    } // modifier onlyOwner
} // Utility


*** SNIPPET 8.2
// A smart contract to model a music album
contract Album is Utility {







*************************************
*************************************
*               Lab 10              *
*************************************
*************************************


*** SNIPPET 10.1
pragma solidity ^0.5.0;

// This is the interface that must be implemented for an ERC-20 compliant token.
contract ERC20Interface {    
    // Returns the total supply of the token created.
    function totalSupply() public view returns (uint);

    // Returns the token balance for the supplied address.
    function balanceOf(address tokenOwner) public view returns (uint balance);

    // This function will cancel a transction if the user does not have sufficient balance.
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);

    // Allows the contract owner to give tokens to other users.
    function transfer(address to, uint tokens) public returns (bool success);

    // This function checks the transaction against the total supply of tokens to make sure that there are none missing or extra.
    function approve(address spender, uint tokens) public returns (bool success);

    // This function is used to support automated transfers to a specific account.
    function transferFrom(address from, address to, uint tokens) public returns (bool success);

    // Event raised on a transfer.
    event Transfer(address indexed from, address indexed to, uint tokens);

    // Event raised on an approval.
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
} // ERC20Interface




*** SNIPPET 10.2
// Safe Math Library wrappers over Solidity’s arithmetic operations with added overflow checks.
//   Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an 
//   overflow raises an error, which is the standard behavior in high level programming languages.
//   Safe Math restores this intuition by reverting the transaction when an operation overflows.
//   Using this library instead of the unchecked operations eliminates an entire class of bugs, so its use is recommended.
contract SafeMath {
    // The safe function for adding.
    function safeAdd(uint a, uint b) public pure returns (uint c) {
        c = a + b;
        require(c >= a);
    } // safeAdd

    // The safe function for subtraction.
    function safeSub(uint a, uint b) public pure returns (uint c) {
        require(b <= a); 
        c = a - b;
    } // safeSub

    // The safe function for multiplication.
    function safeMul(uint a, uint b) public pure returns (uint c) 
    { 
        c = a * b; 
        require(a == 0 || c / a == b); 
    } // safeMul

    // The safe function for division.
    function safeDiv(uint a, uint b) public pure returns (uint c) 
    { 
        require(b > 0);
        c = a / b;
    } // safeDiv
} // SafeMath




*** SNIPPET 10.3
// Our new token Smart Contract.
// Our contract inherits from both the ERC20Interface contract 
//   as well as the SafeMath contract
contract MyToken is ERC20Interface, SafeMath {
    // Local Variables
    //   The token name
    string public name;
    
    //   The token symbol (3 characters)
    string public symbol;
    
    //   The token's precision (number of decimal places)
    uint8 public decimals;
    
    //   The total supply of the new token
    uint256 public _totalSupply;
    
    //   Mappings for account balances and allowed
    mapping(address => uint) balances;    
    mapping(address => mapping(address => uint)) allowed;

    // The constructor for our Smart Contract. 
    //   This function runs ONCE during deployment.
    constructor() public 
    {
        name = "MyToken";
        symbol = "MYT";
        decimals = 18;
        _totalSupply = 100000000000000000000000000;
        
        balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    } // constructor

    // Returns the total supply of the token created.
    function totalSupply() public view returns (uint) 
    {
        return _totalSupply - balances[address(0)];
    } // totalSupply

    // Returns the token balance for the supplied address.
    function balanceOf(address tokenOwner) public view returns (uint balance) 
    {
        return balances[tokenOwner];
    } // balanceOf

    // This function will cancel a transction if the user does not have sufficient balance.
    function allowance (address tokenOwner, address spender) public view returns (uint remaining) 
    {
        return allowed[tokenOwner][spender];
    } // allowance

    // This function checks the transaction against the total supply of tokens to make sure that there are none missing or extra.
    function approve(address spender, uint tokens) public returns (bool success) 
    {
        allowed[msg.sender][spender] = tokens;
        emit Approval(msg.sender, spender, tokens);
        return true;
    } // approve

    // Allows the contract owner to give tokens to other users.
    function transfer(address to, uint tokens) public returns (bool success) 
    {
        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
    
        emit Transfer(msg.sender, to, tokens);
        return true;
    } // transfer
    
    // This function is used to support automated transfers to a specific account.
    function transferFrom (address from, address to, uint tokens) public returns (bool success) 
    {
        balances[from] = safeSub(balances[from], tokens);
        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
        balances[to] = safeAdd(balances[to], tokens);
            
    	emit Transfer(from, to, tokens);
        return true;
    } // transferFrom

} // MyToken






*************************************
*************************************
*               Lab 11              *
*************************************
*************************************

*** SNIPPET 11.1
// SPDX-License-Identifier: MIT
pragma solidity 0.8.0;

// This contract will inherit from the Ownable and NFT Token Metadata contracts from 0xcert
import "https://github.com/0xcert/ethereum-erc721/src/contracts/tokens/nf-token-metadata.sol";
import "https://github.com/0xcert/ethereum-erc721/src/contracts/ownership/ownable.sol";

contract MyNFT is NFTokenMetadata, Ownable {

    // Contract constructor.
    //   Runs at deployment.
    //   Sets name and symbol of NFT.
    constructor() {
        nftName = "MyNFT";
        nftSymbol = "MNF";
    } // constructor

    // This function will mint a new NFT and deposit it in the wallet at the _to address.
    //   Each token must have a Token ID.
    //   The URL property indicates the digital asset the token holder has access to.
    function mint(address _to, uint256 _tokenId, string calldata _url) external onlyOwner {
        super._mint(_to, _tokenId);
        super._setTokenUri(_tokenId, _url);
    } // mint

} // MyNFT

